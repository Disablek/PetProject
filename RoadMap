# üìå Pet-–ø—Ä–æ–µ–∫—Ç: –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ + RoadMap –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è .NET

---

## üéØ –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞

–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å **Pet-–ø—Ä–æ–µ–∫—Ç "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"**, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏–∑—É—á–∞—è –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ .NET-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.

---

## üóÇÔ∏è –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

**1. API Gateway (YARP)**
**2. TaskService (–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏)**
**3. UserService (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)**
**4. NotificationService (–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ RabbitMQ)**
**5. PostgreSQL, Redis, RabbitMQ, Docker Compose**

---

## üìç –≠—Ç–∞–ø 1: –û—Å–Ω–æ–≤—ã C# –∏ .NET (–ù–µ–¥–µ–ª—è 1)

### üéì –ß—Ç–æ –∏–∑—É—á–∏—Ç—å:

* –û—Å–Ω–æ–≤—ã C# 12: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–ª–∞—Å—Å—ã, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –¥–µ–ª–µ–≥–∞—Ç—ã, —Å–æ–±—ã—Ç–∏—è
* –ö–æ–ª–ª–µ–∫—Ü–∏–∏, LINQ, async/await, –∏—Å–∫–ª—é—á–µ–Ω–∏—è
* –ß—Ç–æ —Ç–∞–∫–æ–µ .NET, CLR, JIT, GC

### üî® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

* [ ] –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "To-Do List"

  * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  * –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
  * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á

  üî® –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –≤ Pet-–ø—Ä–æ–µ–∫—Ç–µ:

–°–æ–∑–¥–∞—à—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TodoConsoleApp

–ö–ª–∞—Å—Å TaskItem —Å –ø–æ–ª—è–º–∏: Id, Title, IsCompleted

–ú–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏: –¥–æ–±–∞–≤–∏—Ç—å, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É

–ò—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ø–∏—Å–∫–∏ (List<T>) –∏ LINQ

–ü—Ä–∏–º–µ–Ω–∏—à—å –¥–µ–ª–µ–≥–∞—Ç—ã/—Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á

üéØ –¶–µ–ª—å: –ø–æ–Ω—è—Ç—å –û–û–ü, –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ C#

---

## üìç –≠—Ç–∞–ø 2: ASP.NET Core Web API (–ù–µ–¥–µ–ª—è 2)

### üéì –ß—Ç–æ –∏–∑—É—á–∏—Ç—å:

* REST API –ø—Ä–∏–Ω—Ü–∏–ø—ã
* Controllers vs Minimal API
* DI, Middleware, Logging

### üî® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

* [ ] –ü—Ä–æ–µ–∫—Ç TaskService

  * CRUD –¥–ª—è –∑–∞–¥–∞—á (`TaskItem`): Id, Title, Description, DueDate, Status
  * InMemoryStorage –¥–ª—è –∑–∞–¥–∞—á

  üî® –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å:

–°–æ–∑–¥–∞—à—å Web API –ø—Ä–æ–µ–∫—Ç TaskService.Api

–ò—Å–ø–æ–ª—å–∑—É–µ—à—å Minimal API, —Å–æ–∑–¥–∞—à—å MapGet, MapPost, MapPut, MapDelete –¥–ª—è TaskItem

–•—Ä–∞–Ω–∏—à—å –¥–∞–Ω–Ω—ã–µ –≤ InMemoryRepository

–†–∞–∑–¥–µ–ª—è–µ—à—å –∫–æ–¥ –ø–æ Feature –ø–∞–ø–∫–∞–º (Vertical Slice Architecture)

üéØ –¶–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π HTTP-—Å–µ—Ä–≤–∏—Å –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å ASP.NET Core

---

## üìç –≠—Ç–∞–ø 3: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ SOLID (–ù–µ–¥–µ–ª—è 3)

### üéì –ß—Ç–æ –∏–∑—É—á–∏—Ç—å:

* –ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID
* 3-—Å–ª–æ–π–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (Presentation / Business Logic / Data)
* Clean Architecture, Repository / Unit of Work

### üî® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

* [ ] –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ—ë–≤ –≤ TaskService
* [ ] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DTO –∏ AutoMapper
* [ ] EF Core + SQLite + –º–∏–≥—Ä–∞—Ü–∏–∏

üî® –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å:

–†–∞–∑–¥–µ–ª–∏—à—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ —Å–ª–æ–∏: API, Application, Domain, Infrastructure

–°–æ–∑–¥–∞—à—å ITaskRepository, —Ä–µ–∞–ª–∏–∑—É–µ—à—å –µ–≥–æ –≤ Infrastructure

–ò—Å–ø–æ–ª—å–∑—É–µ—à—å AutoMapper –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ DTO ‚Üî Entity

–ü–æ–¥–∫–ª—é—á–∏—à—å EF Core —Å SQLite, —Å–æ–∑–¥–∞—à—å –º–∏–≥—Ä–∞—Ü–∏–∏

üéØ –¶–µ–ª—å: –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–ª–æ–∏—Å—Ç—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID

---

## üìç –≠—Ç–∞–ø 4: CQRS + MediatR + Validation (–ù–µ–¥–µ–ª—è 4)

### üéì –ß—Ç–æ –∏–∑—É—á–∏—Ç—å:

* CQRS (Command Query Responsibility Segregation)
* MediatR, Handlers, Pipelines
* FluentValidation

### üî® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

* [ ] –î–æ–±–∞–≤–∏—Ç—å CQRS –ø–æ–¥—Ö–æ–¥ –≤ TaskService
* [ ] Commands: CreateTaskCommand, UpdateTaskCommand
* [ ] Queries: GetAllTasksQuery, GetTaskByIdQuery
* [ ] ValidationBehavior + FluentValidation

üî® –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å:

–î–æ–±–∞–≤–∏—à—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É MediatR

–°–æ–∑–¥–∞—à—å –∫–æ–º–∞–Ω–¥—ã: CreateTaskCommand, UpdateTaskCommand

–°–æ–∑–¥–∞—à—å –∑–∞–ø—Ä–æ—Å—ã: GetTasksQuery, GetTaskByIdQuery

–ü—Ä–∏–º–µ–Ω–∏—à—å FluentValidation –∏ ValidationBehavior

üéØ –¶–µ–ª—å: –æ—Å–≤–æ–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω CQRS –∏ –º–µ–∂—Å–ª–æ–π–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ MediatR

---

## üìç –≠—Ç–∞–ø 5: PostgreSQL + Docker (–ù–µ–¥–µ–ª—è 5)

### üéì –ß—Ç–æ –∏–∑—É—á–∏—Ç—å:

* Docker –æ—Å–Ω–æ–≤—ã
* PostgreSQL —Å EF Core
* Docker Compose

### üî® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

* [ ] –ü–µ—Ä–µ–≤–æ–¥ TaskService –Ω–∞ PostgreSQL
* [ ] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ docker-compose: task-api + postgres
* [ ] –ê–≤—Ç–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ

üî® –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å:

–ü–µ—Ä–µ–≤–µ–¥—ë—à—å EF Core –Ω–∞ PostgreSQL (–ø–æ–º–µ–Ω—è–µ—à—å DbContext)

–î–æ–±–∞–≤–∏—à—å docker-compose.yml —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ task-api –∏ postgres

–†–µ–∞–ª–∏–∑—É–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

üéØ –¶–µ–ª—å: —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏

---

## üìç –≠—Ç–∞–ø 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–ù–µ–¥–µ–ª—è 6)

### üéì –ß—Ç–æ –∏–∑—É—á–∏—Ç—å:

* ASP.NET Identity (–±–∞–∑–æ–≤–æ)
* –†–∞–±–æ—Ç–∞ —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ –≤ EF Core (User ‚Üî Tasks)

### üî® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

* [ ] –°–æ–∑–¥–∞—Ç—å UserService (–æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å)
* [ ] –ü—Ä–∏–≤—è–∑–∫–∞ –∑–∞–¥–∞—á–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (UserId)
* [ ] JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

üî® –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å:

–°–æ–∑–¥–∞—à—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å UserService

–ò—Å–ø–æ–ª—å–∑—É–µ—à—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ë–î

–î–æ–±–∞–≤–∏—à—å —Å—É—â–Ω–æ—Å—Ç—å User, –ø—Ä–∏–≤—è–∂–µ—à—å Task –∫ UserId

–†–µ–∞–ª–∏–∑—É–µ—à—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/–ª–æ–≥–∏–Ω (JWT –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ)

üéØ –¶–µ–ª—å: –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π

---

## üìç –≠—Ç–∞–ø 7: RabbitMQ + –°–æ–±—ã—Ç–∏—è (–ù–µ–¥–µ–ª—è 7)

### üéì –ß—Ç–æ –∏–∑—É—á–∏—Ç—å:

* –û—Å–Ω–æ–≤—ã –±—Ä–æ–∫–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
* RabbitMQ: –æ—á–µ—Ä–µ–¥–∏, –æ–±–º–µ–Ω–Ω–∏–∫–∏
* MassTransit

### üî® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

* [ ] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è `TaskCompleted` –∏–∑ TaskService
* [ ] NotificationService ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üî® –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å:

–ù–∞—Å—Ç—Ä–æ–∏—à—å RabbitMQ –∏ MassTransit

–û—Ç–ø—Ä–∞–≤–∏—à—å —Å–æ–±—ã—Ç–∏–µ TaskCompleted –∏–∑ TaskService

–í NotificationService –ø–æ–¥–ø–∏—à–µ—à—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ

–õ–æ–≥–∏—Ä—É–µ—à—å –∏–ª–∏ –∏–º–∏—Ç–∏—Ä—É–µ—à—å –æ—Ç–ø—Ä–∞–≤–∫—É email

üéØ –¶–µ–ª—å: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –º–µ–∂–¥—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏

---

## üìç –≠—Ç–∞–ø 8: API Gateway (YARP) + gRPC (–ù–µ–¥–µ–ª—è 8)

### üéì –ß—Ç–æ –∏–∑—É—á–∏—Ç—å:

* YARP (Reverse Proxy): –º–∞—Ä—à—Ä—É—Ç—ã, –∫–ª–∞—Å—Ç–µ—Ä—ã
* gRPC: –±–∞–∑–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏

### üî® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

* [ ] API Gateway —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –Ω–∞ TaskService –∏ UserService
* [ ] –í–Ω–µ–¥—Ä–µ–Ω–∏–µ gRPC –º–µ–∂–¥—É TaskService ‚Üî UserService (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Id)

üî® –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å:

–ü–æ–¥–Ω–∏–º–µ—à—å ApiGateway —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –Ω–∞ TaskService, UserService

–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ—à—å –º–∞—Ä—à—Ä—É—Ç—ã —á–µ—Ä–µ–∑ Swagger

–î–æ–±–∞–≤–∏—à—å gRPC: TaskService –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Id –∏–∑ UserService

üéØ –¶–µ–ª—å: –Ω–∞—É—á–∏—Ç—å—Å—è —Å—Ç—Ä–æ–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gRPC

---

## üìç –≠—Ç–∞–ø 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, Monitoring (–ù–µ–¥–µ–ª—è 9)

### üéì –ß—Ç–æ –∏–∑—É—á–∏—Ç—å:

* Unit / Integration —Ç–µ—Å—Ç—ã
* Swagger / OpenAPI
* HealthChecks, Serilog

### üî® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

* [ ] Swagger –¥–ª—è –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
* [ ] Unit —Ç–µ—Å—Ç—ã Handlers
* [ ] HealthChecks –¥–ª—è Gateway –∏ TaskService

üî® –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å:

–ù–∞–ø–∏—à–µ—à—å Unit-—Ç–µ—Å—Ç—ã –Ω–∞ Handlers (MediatR)

–î–æ–±–∞–≤–∏—à—å Swagger –≤–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã

–ù–∞—Å—Ç—Ä–æ–∏—à—å HealthChecks –∏ Serilog

üéØ –¶–µ–ª—å: —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∏ –≥–æ—Ç–æ–≤—ã–º –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É

---

## üìç –≠—Ç–∞–ø 10: –§–∏–Ω–∞–ª: Docker Compose + –ó–∞–ø—É—Å–∫ (–ù–µ–¥–µ–ª—è 10)

### üéì –ß—Ç–æ –∏–∑—É—á–∏—Ç—å:

* `docker-compose.override.yml`
* Volumes, networks, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤

### üî® –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:

* [ ] –§–∏–Ω–∞–ª—å–Ω—ã–π `docker-compose.yml`:

  * API Gateway
  * TaskService
  * UserService
  * NotificationService
  * PostgreSQL
  * RabbitMQ
* [ ] –û–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

üî® –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å:

–°–æ–±–µ—Ä—ë—à—å docker-compose.yml —Å 6 —Å–µ—Ä–≤–∏—Å–∞–º–∏

–ù–∞—Å—Ç—Ä–æ–∏—à—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ (depends_on)

–î–æ–±–∞–≤–∏—à—å entrypoint.sh –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π

–°–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—à—å –æ–±—â–∏–π –ª–æ–≥–≥–µ—Ä

üéØ –¶–µ–ª—å: —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π

---

## ‚úÖ –í –∏—Ç–æ–≥–µ —Ç—ã –∏–∑—É—á–∏—à—å:

* –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π C# 12
* ASP.NET Core Minimal APIs –∏ Web API
* Clean Architecture, SOLID, CQRS, MediatR
* PostgreSQL, EF Core, Redis, RabbitMQ, MassTransit
* Docker + Docker Compose
* gRPC, YARP, AutoMapper, FluentValidation
* Unit —Ç–µ—Å—Ç—ã, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, Health Checks, Swagger

---


# üõ† –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Pet-–ø—Ä–æ–µ–∫—Ç–∞ "Task Manager"

---

## ‚úÖ –≠—Ç–∞–ø 1: –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (C# –±–∞–∑–æ–≤—ã–π)

- –°–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç: `dotnet new console -n TaskManager.Console`
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
  - –ö–ª–∞—Å—Å—ã: `TaskItem.cs`, `User.cs`
  - –°–µ—Ä–≤–∏—Å: `TaskService.cs`
- –õ–æ–≥–∏–∫–∞:
  - CRUD –¥–ª—è –∑–∞–¥–∞—á –≤ `List<TaskItem>`
  - –ò—Å–ø–æ–ª—å–∑—É–π –¥–µ–ª–µ–≥–∞—Ç—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π: `TaskCompleted`
- –¶–µ–ª—å: –ø–æ–Ω—è—Ç—å –û–û–ü, –∫–æ–ª–ª–µ–∫—Ü–∏–∏, LINQ, async/await

---

## ‚úÖ –≠—Ç–∞–ø 2: Web API (Minimal API)

- –ü—Ä–æ–µ–∫—Ç: `dotnet new web -n TaskService`
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
  - `Program.cs` (Minimal API)
  - `TaskItem.cs`, `TaskService.cs`
- –ü–æ–¥—Å–∫–∞–∑–∫–∏:
  - –ò—Å–ø–æ–ª—å–∑—É–π `app.MapGet`, `app.MapPost` –∏ —Ç.–¥.
  - –í—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏ –∑–∞–¥–∞—á–∏ –≤ `List<TaskItem>` (in-memory)
- –¢–µ—Å—Ç–∏—Ä—É–π —á–µ—Ä–µ–∑ Postman –∏–ª–∏ Swagger

---

## ‚úÖ –≠—Ç–∞–ø 3: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ + EF Core

- –ò—Å–ø–æ–ª—å–∑—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É:
  - `Domain` (—Å—É—â–Ω–æ—Å—Ç–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)
  - `Application` (CQRS, —Å–µ—Ä–≤–∏—Å—ã)
  - `Infrastructure` (EF, Repository)
  - `WebApi` (Controllers/Minimal API)
- –ò—Å–ø–æ–ª—å–∑—É–π PostgreSQL:
  - –î–æ–±–∞–≤—å Docker —Å–µ—Ä–≤–∏—Å –≤ `docker-compose.yml`:

    ```yaml
    postgres:
      image: postgres:16
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: taskdb
      ports:
        - "5432:5432"
    ```

- –£—Å—Ç–∞–Ω–æ–≤–∏ EF Core:
  ```bash
  dotnet add package Microsoft.EntityFrameworkCore.Design
  dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
–°–æ–∑–¥–∞–π AppDbContext –∏ DbSet<TaskItem>

–ù–∞—Å—Ç—Ä–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ appsettings.json:

json

"ConnectionStrings": {
  "Default": "Host=localhost;Port=5432;Database=taskdb;Username=postgres;Password=postgres"
}
–ú–∏–≥—Ä–∞—Ü–∏–∏:

bash

dotnet ef migrations add Init
dotnet ef database update
–°–æ–∑–¥–∞–π ITaskRepository –∏ —Ä–µ–∞–ª–∏–∑—É–π –≤ EfTaskRepository

–ù–∞—Å—Ç—Ä–æ–π DI:

csharp

builder.Services.AddScoped<ITaskRepository, EfTaskRepository>();
‚úÖ –≠—Ç–∞–ø 4: CQRS + MediatR + FluentValidation
–£—Å—Ç–∞–Ω–æ–≤–∏:

bash

dotnet add package MediatR.Extensions.Microsoft.DependencyInjection
dotnet add package FluentValidation.AspNetCore
–î–æ–±–∞–≤—å –∑–∞–ø—Ä–æ—Å—ã/–∫–æ–º–∞–Ω–¥—ã:

GetTasksQuery, CreateTaskCommand

–ò—Å–ø–æ–ª—å–∑—É–π IRequest<>, IRequestHandler<>

–î–æ–±–∞–≤—å ValidationBehavior<TRequest, TResponse>

–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π:

csharp

builder.Services.AddMediatR(typeof(Program));
builder.Services.AddValidatorsFromAssemblyContaining<Program>();
‚úÖ –≠—Ç–∞–ø 5: Docker Compose + –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
–°–æ–∑–¥–∞–π docker-compose.yml —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏:

task-service, postgres, rabbitmq, gateway

–°–æ–∑–¥–∞–π entrypoint.sh –≤ task-service:

bash

#!/bin/bash
dotnet ef database update
dotnet TaskService.dll
–î–æ–±–∞–≤—å –≤ Dockerfile:

Dockerfile

COPY entrypoint.sh .
RUN chmod +x entrypoint.sh
ENTRYPOINT ["./entrypoint.sh"]
‚úÖ –≠—Ç–∞–ø 6: RabbitMQ + MassTransit
–í docker-compose.yml –¥–æ–±–∞–≤—å RabbitMQ:

yaml

rabbitmq:
  image: rabbitmq:3-management
  ports:
    - "5672:5672"
    - "15672:15672"
–î–æ–±–∞–≤—å MassTransit:

bash

dotnet add package MassTransit
dotnet add package MassTransit.RabbitMQ
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:

csharp

services.AddMassTransit(x =>
{
    x.UsingRabbitMq((ctx, cfg) =>
    {
        cfg.Host("rabbitmq", "/", h =>
        {
            h.Username("guest");
            h.Password("guest");
        });
    });
});
–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è:

csharp

await _publishEndpoint.Publish(new TaskCompletedEvent(...));
‚úÖ –≠—Ç–∞–ø 7: Gateway + gRPC
–£—Å—Ç–∞–Ω–æ–≤–∏ YARP:

bash

dotnet add package Yarp.ReverseProxy
–ü—Ä–∏–º–µ—Ä yarp.json:

json

{
  "ReverseProxy": {
    "Routes": [
      {
        "RouteId": "task_route",
        "ClusterId": "task_cluster",
        "Match": {
          "Path": "/tasks/{**catch-all}"
        }
      }
    ],
    "Clusters": {
      "task_cluster": {
        "Destinations": {
          "task_api": {
            "Address": "http://task-service:80/"
          }
        }
      }
    }
  }
}
–î–æ–±–∞–≤—å gRPC –≤ UserService –∏ –≤—ã–∑–æ–≤ –∏–∑ TaskService

‚úÖ –≠—Ç–∞–ø 8: –¢–µ—Å—Ç—ã, –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
–î–æ–±–∞–≤—å xUnit –∏ Moq –¥–ª—è —é–Ω–∏—Ç-—Ç–µ—Å—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π Serilog:

bash

dotnet add package Serilog.AspNetCore
–í Program.cs:

csharp

Log.Logger = new LoggerConfiguration()
    .WriteTo.Console()
    .WriteTo.File("logs/log.txt")
    .CreateLogger();
–î–æ–±–∞–≤—å HealthChecks:

csharp

builder.Services.AddHealthChecks().AddNpgSql(configuration.GetConnectionString("Default"));
‚úÖ –§–∏–Ω–∞–ª: –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ docker-compose

–í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ

–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω—ã

Swagger —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö API

–í—Å–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã

Gateway –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ http://localhost:8080

üîÑ –•–æ—á–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é?
–ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ: entrypoint.sh

–§–∞–π–ª run.sh –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞:

bash

docker-compose build
docker-compose up
üéØ –°–æ–≤–µ—Ç—ã
–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –∫–æ–º–º–∏—Ç—å –≤ Git

–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É (Markdown + —Å—Ö–µ–º—ã)

–ü–∏—à–∏ README –∫ –∫–∞–∂–¥–æ–º—É —Å–µ—Ä–≤–∏—Å—É

–ù–∞—Å—Ç—Ä–æ–π CI –ø–æ–∑–∂–µ (GitHub Actions)

~~~
mvc .net core
~~~
